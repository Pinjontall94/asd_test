#!/bin/bash
# otuGen -- a bash script to generate OTU tables from a barcoded, 
#		screened fasta file.

# AUTHOR: Sam Johnson
# LICENSE: GNU Affero General Public License 
#	https://www.gnu.org/licenses/agpl-3.0.html
# DEPENDS: bash v5.0.016-1, mothur v1.39.5, vsearch v1.39.5,
#		python v2.7, create_otu_table_from_uc_file.py
# VERSION: 0.9.0

# Set mothur module variables
MOTHUR_MODULE=mothur
MOTHUR_MOD_VER=1.39.5

# Set "executable in path?" variable (for legibility)
inPath=

# Set Taxonomic database directory
TAXO_DB="../../databases/silva_v128/"

# Define use flags
while getopts "h :l" FLAGS; do
	case "${FLAGS}" in
		h)
			echo "Usage: otuGen [h|l] [ threads (optional) ]"
			exit;;
		l)
			LOCAL=1
			;;
	esac
done
shift $(($OPTIND-1))

# Set available threads 
if [[ $LOCAL=1 ]]; then
	THREAD_DEFAULT=$(( $(nproc) - 2 ))
else
	THREAD_DEFAULT=$(nproc)
fi

THREADS=${1:-$THREAD_DEFAULT}


# ====================
# == Util Functions ==
# ====================

pathTester(){
	# Test if cutadapt is in PATH, and load if necessary

	# TODO: Update so if not in PATH, load relevant module, and if no
	# 	module, switch to local executable in resulting function call.
	#	(Maybe return a "in_path" variable to be interpreted by
	#	functions with dependencies?)
	# Usage: pathTester <executable> <module (opt.)> <version (opt.)>


	if [[ $(type -t $1) ]]; then
		echo "asdMetagen: $1 is in PATH"
		inPath=1
	elif [[ $(type -t ./$1) ]]; then
		echo "asdMetagen: WARNING: $1 is in directory, but not PATH"
		inPath=0
	elif [[ $(type -t module) ]]; then
	    	echo "asdMetagen: $1 not found in PATH"
		echo "asdMetagen: Running command: module load $2"
		module load $2/$3
	    	inPath=1
	else
		echo "asdMetagen: Error! No module, local executable, or path"\
			"executable found. Aborting..."
		exit 1
	fi
}


biExec(){
	# Use after pathTester, executes local executable if not in path
	# Usage: biExec <command string>
	if ((inPath=1)); then
		echo "\$inPath = $inPath"
		echo "asdMetagen: Using executable in path"
		echo "asdMetagen: command: $*"
		$*
	else
		echo "\$inPath = $inPath"
		echo "asdMetagen: Using local executable"
		echo "asdMetagen: command: $*"
		./$*
	fi
}


# ====================
# == MAIN Functions ==
# ====================

derep(){
	# Dereplicate the barcoded fasta
	#
	# Poret-Peterson: 
	# 	"Singletons (OTUs represented 1 sequence) are discarded 
	# 	via the --minuniquesize command; setting this to 2 would 
	# 	generate OTUs represented by 2 or more sequences"
	
	pathTester vsearch
	biExec vsearch --derep_fulllength metaan.barcoded.fasta \
		--sizein --sizeout --minuniquesize 2 \
		--output metaan.derep.fasta
}


clusterOTUs(){
	# Cluster seqs into OTUs
	#
	# Poret-Peterson:
	#
	#	"Cluster sequences into OTUs (operational taxonomic units) at a
	#	97% cutoff (97% or more identity among sequences in an OTU). 
	#	Set threads to 40 in this example. This will need to be changed."

	pathTester vsearch
	biExec vsearch --cluster_fast metaan.derep.fasta --id 0.97 \
		--centroids metaan.otus.fasta --uc metaan.otus.uc \
		--relabel OTU_ --sizein --sizeout --threads $THREADS
}

chimeraScreen(){
	# Screen for chimeric sequences
	pathTester vsearch
	biExec vsearch --uchime_denovo metaan.otus.fasta --abskew 1.5 \
		--nonchimeras metaan.otus.nc.fasta --fasta_width 0
}

taxoClassify(){
	# Uses mothur to taxonomically classify OTUs
	# 	[Note: May need to update silva version prior to running ]
	pathTester mothur $MOTHUR_MODULE $MOTHUR_MOD_VER
	TAXO_DB=$1
	TAXO_PARAMS+=("fasta=metaan.otus.nc.fasta,"\
		"template=$TAXO_DBsilva.nr_v128.U515F806R.pcr.good.ng.fasta,"\
		"taxonomy=$TAXO_DBsilva.nr_v128.U515F806R.pcr.good.tax,"\
		"cutoff=80")
	LINEAGE_PARAMS+=("fasta=metaan.otus.nc.fasta,"\
		"taxonomy=metaan.otus.nc.good.wang.taxonomy, taxon=unknown")
	mothurBatch classify seqs "${TAXO_PARAMS[*]}" > taxo_batch.txt
	mothurBatch remove lineage "${LINEAGE_PARAMS[*]}" >> taxo_batch.txt
	biExec mothur taxo_batch.txt 
	rm taxo_batch.txt
}


mapOTUs(){
	# Maps OTUs against reads and converts them to an OTU table
	pathTester vsearch
	biExec vsearch --usearch_global metaan.barcoded.fasta \
		-db metaan.otus.nc.pick.fasta \
		--uc metaan.otus.nc.readmap.uc --id 0.97 \
		--strand plus --threads $THREADS &
}


readmap2file(){
	# Convert the readmap to an OTU table
	python2.7 create_otu_table_from_uc_file.py \
		-i metaan.otus.nc.readmap.uc \
		-o metaan.otus.final.readmap.table
}


#derep 
#clusterOTUs
#chimeraScreen
#taxoClassify 
#mapOTUs
#readmap2file
