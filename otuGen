#!/bin/bash
# otuGen -- A bash script to generate OTU tables from a barcoded,
#		screened fasta file. Use in a directory populated with files
#		with a ".barcoded.fasta" extension, as well as
#		create_otu_table_from_uc_file.py
#
# Usage: otuGen -d <taxo_db>

# AUTHOR: Sam Johnson
# LICENSE: GNU Affero General Public License 
#	https://www.gnu.org/licenses/agpl-3.0.html
# DEPENDS: bash v5.0.016-1, mothur v1.39.5, vsearch v1.39.5,
#		python v2.7, create_otu_table_from_uc_file.py
# VERSION: 0.9.0

# Set mothur module variables
MOTHUR_MODULE=mothur
MOTHUR_MOD_VER=1.39.5

usage(){
	echo "Usage: $0 [options] -d <taxo_db_dir>"
	echo "	-h : help"
	echo "	-l : local mode (restricts default thread count)"
	echo "	-d <taxonomic_database_directory>"\
		": Set taxonomic databases to classify OTUs [REQUIRED]"
	echo "    Ex: $0 -ld silva_v138_mothur"
}

# If no arguments, print usage statement and exit
if (($# == 0)); then
	usage
	exit
fi

# Define use flags
while getopts ":hld:" FLAGS; do
	case "$FLAGS" in
		h)
			usage
			exit
			;;
		l)
			LOCAL=1
			;;
		n)
			THREADS=$OPTARG
			;;
		d)
			TAXO_DB=$OPTARG
			;;
		:)
			echo "$0: Option -$OPTARG requires an argument"
			exit
			;;
	esac
done


# Set available threads 
if [[ $LOCAL == 1 ]]; then
	THREAD_DEFAULT=$(( $(nproc) - 2 ))
else
	THREAD_DEFAULT=$(nproc)
fi

if [[ ! $THREADS ]]; then
	echo "otuGen: Setting threads to default setting"
	THREADS=$THREAD_DEFAULT
fi


# --------------------
# -- Util Functions --
# --------------------

pathTester(){
	# Test if cutadapt is in PATH, and load if necessary
	# Usage: pathTester <executable> <module (opt.)> <version (opt.)>

	if [[ $(type -t $1) ]]; then
		echo "$0: $1 is in PATH"
	elif [[ $(type -t ./$1) ]]; then
		echo "$0: Error: $1 is in directory, but not PATH"
		echo "$0: Please move $1 to PATH before re-running!"
		echo "$0: Exiting..."
		exit 1
	elif [[ $(type -t module) ]]; then
	    	echo "$0: $1 not found in PATH"
		echo "$0: Running command: module load $2/$3"
		module load $2/$3
	else
		echo "$0: Error! No module, local executable, or path"\
			"executable found. Aborting..."
		exit 1
	fi
}


mothurBatch(){
	# Wrapper script for generating simple mothur commands, prints
	# 	command to stdout to create batch files

	# Note: If you have many parameters, put them in an array!
	# Ex: EX_PARAMS+=(fasta=blah.fasta,"\
	#	group=blah.groups)
	#
	# Just make sure to refer to them with * expansion, not @ expansion
	# e.g. mothurBatch doggo play ${EX_PARAMS[*]}
	# 	|==> doggo.play(fasta=blah.fasta, group=blah.groups)

	COMMAND="$1.$2"
	PARAMS="$3"
	BATCH_FILE=$1_$2_batch.txt

	echo "$COMMAND($PARAMS)"
}


# ====================
# == MAIN Functions ==
# ====================

derep(){
	# Dereplicate the barcoded fasta
	#
	# Poret-Peterson: 
	# 	"Singletons (OTUs represented 1 sequence) are discarded 
	# 	via the --minuniquesize command; setting this to 2 would 
	# 	generate OTUs represented by 2 or more sequences"
	
	vsearch --derep_fulllength metaan.barcoded.fasta\
		--sizein --sizeout --minuniquesize 2\
		--output metaan.derep.fasta
}


clusterOTUs(){
	# Cluster seqs into OTUs
	#
	# Poret-Peterson:
	#
	#	"Cluster sequences into OTUs (operational taxonomic units) at a
	#	97% cutoff (97% or more identity among sequences in an OTU). 
	#	Set threads to 40 in this example. This will need to be changed."

	vsearch --cluster_fast metaan.derep.fasta --id 0.97\
		--centroids metaan.otus.fasta --uc metaan.otus.uc\
		--relabel OTU_ --sizein --sizeout --threads $THREADS
}

chimeraScreen(){
	# Screen for chimeric sequences
	vsearch --uchime_denovo metaan.otus.fasta --abskew 1.5\
		--nonchimeras metaan.otus.nc.fasta --fasta_width 0
}

taxoClassify(){
	# Uses mothur to taxonomically classify OTUs
	# 	[Note: May need to update silva version prior to running]
	TAXO_TEMPLATE=$(find $TAXO_DB -maxdepth 1 -name "*.ng.fasta")
	TAXO_NOMY=$(find $TAXO_DB -maxdepth 1 -name "*.tax")

	pathTester mothur $MOTHUR_MODULE $MOTHUR_MOD_VER
	TAXO_PARAMS+=("fasta=metaan.otus.nc.fasta,"\
		"template=$TAXO_TEMPLATE,"\
		"taxonomy=$TAXO_NOMY,"\
		"cutoff=80", "output=metaan.otus.nc.good.wang.taxonomy")
	LINEAGE_PARAMS+=("fasta=metaan.otus.nc.fasta,"\
		"taxonomy=metaan.otus.nc.nr_v138.wang.taxonomy, taxon=unknown")
	mothurBatch classify seqs "${TAXO_PARAMS[*]}" > taxo_batch.txt
	mothurBatch remove lineage "${LINEAGE_PARAMS[*]}" >> taxo_batch.txt
	mothur taxo_batch.txt 
	rm taxo_batch.txt
}


mapOTUs(){
	# Maps OTUs against reads and converts them to an OTU table
	vsearch --usearch_global metaan.barcoded.fasta\
		-db metaan.otus.nc.pick.fasta\
		--uc metaan.otus.nc.readmap.uc --id 0.97\
		--strand plus --threads $THREADS
}


readmap2file(){
	# Convert the readmap to an OTU table
	python2 create_otu_table_from_uc_file.py\
		-i metaan.otus.nc.readmap.uc\
		-o metaan.otus.final.readmap.table
}


# =============	
# == M A I N ==
# =============

main(){
	for i in *.barcoded.fasta; do
		echo "adding $i to metaan.barcoded.fasta"
		cat $i >> metaan.barcoded.fasta
	done
	derep 
	clusterOTUs
	chimeraScreen
	taxoClassify 
	mapOTUs
	readmap2file
}
main
